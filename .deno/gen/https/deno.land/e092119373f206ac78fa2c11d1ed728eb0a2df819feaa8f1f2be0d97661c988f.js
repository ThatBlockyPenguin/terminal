import { join } from "./vendor/https/deno.land/std/path/mod.ts";
export class Group {
    prefix;
    middleware;
    app;
    #willBeAdded;
    constructor(opts){
        this.prefix = opts.prefix || "";
        this.app = opts.app || {
        };
        this.middleware = [];
        this.#willBeAdded = [];
    }
    use(...m) {
        this.middleware.push(...m);
        return this;
    }
    connect(path, h, ...m) {
        this.#willBeAdded.push([
            "CONNECT",
            path,
            h,
            m
        ]);
        return this;
    }
    delete(path, h, ...m) {
        this.#willBeAdded.push([
            "DELETE",
            path,
            h,
            m
        ]);
        return this;
    }
    get(path, h, ...m) {
        this.#willBeAdded.push([
            "GET",
            path,
            h,
            m
        ]);
        return this;
    }
    head(path, h, ...m) {
        this.#willBeAdded.push([
            "HEAD",
            path,
            h,
            m
        ]);
        return this;
    }
    options(path, h, ...m) {
        this.#willBeAdded.push([
            "OPTIONS",
            path,
            h,
            m
        ]);
        return this;
    }
    patch(path, h, ...m) {
        this.#willBeAdded.push([
            "PATCH",
            path,
            h,
            m
        ]);
        return this;
    }
    post(path, h, ...m) {
        this.#willBeAdded.push([
            "POST",
            path,
            h,
            m
        ]);
        return this;
    }
    put(path, h, ...m) {
        this.#willBeAdded.push([
            "PUT",
            path,
            h,
            m
        ]);
        return this;
    }
    trace(path, h, ...m) {
        this.#willBeAdded.push([
            "TRACE",
            path,
            h,
            m
        ]);
        return this;
    }
    any(path, h, ...m) {
        const methods = [
            "CONNECT",
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT",
            "TRACE", 
        ];
        for (const method of methods){
            this.#willBeAdded.push([
                method,
                path,
                h,
                m
            ]);
        }
        return this;
    }
    match(methods, path, h, ...m) {
        for (const method of methods){
            this.#willBeAdded.push([
                method,
                path,
                h,
                m
            ]);
        }
        return this;
    }
    add(method, path, handler, ...middleware) {
        this.#willBeAdded.push([
            method,
            path,
            handler,
            middleware
        ]);
        return this;
    }
    static(prefix, root) {
        this.app.static(join(this.prefix, prefix), root);
        return this;
    }
    file(p, filepath, ...m) {
        this.app.file(join(this.prefix, p), filepath, ...m);
        return this;
    }
    group(prefix, ...m) {
        const g = this.app.group(this.prefix + prefix, ...this.middleware, ...m);
        return g;
    }
    Î¸applyMiddleware() {
        for (const [method, path, handler, middleware] of this.#willBeAdded){
            this.app.add(method, this.prefix + path, handler, ...this.middleware, ...middleware);
        }
        this.#willBeAdded = [];
    }
}
//# sourceMappingURL=data:application/json;base64,