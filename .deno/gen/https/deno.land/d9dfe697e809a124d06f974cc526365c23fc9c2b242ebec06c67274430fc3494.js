export class Tokenizer {
    rules;
    constructor(rules = []){
        this.rules = rules;
    }
    addRule(test, fn) {
        this.rules.push({
            test,
            fn
        });
        return this;
    }
    tokenize(string, receiver = (token)=>token
    ) {
        function* generator(rules) {
            let index = 0;
            for (const rule of rules){
                const result = rule.test(string);
                if (result) {
                    const { value , length  } = result;
                    index += length;
                    string = string.slice(length);
                    const token = {
                        ...rule.fn(value),
                        index
                    };
                    yield receiver(token);
                    yield* generator(rules);
                }
            }
        }
        const tokenGenerator = generator(this.rules);
        const tokens = [];
        for (const token of tokenGenerator){
            tokens.push(token);
        }
        if (string.length) {
            throw new Error(`parser error: string not fully parsed! ${string.slice(0, 25)}`);
        }
        return tokens;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjk5LjAvZGF0ZXRpbWUvdG9rZW5pemVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjEgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbmV4cG9ydCB0eXBlIFRva2VuID0ge1xuICB0eXBlOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmcgfCBudW1iZXI7XG4gIGluZGV4OiBudW1iZXI7XG4gIFtrZXk6IHN0cmluZ106IHVua25vd247XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlY2VpdmVyUmVzdWx0IHtcbiAgW25hbWU6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB8IHVua25vd247XG59XG5leHBvcnQgdHlwZSBDYWxsYmFja1Jlc3VsdCA9IHtcbiAgdHlwZTogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xuICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xufTtcbnR5cGUgQ2FsbGJhY2tGdW5jdGlvbiA9ICh2YWx1ZTogdW5rbm93bikgPT4gQ2FsbGJhY2tSZXN1bHQ7XG5cbmV4cG9ydCB0eXBlIFRlc3RSZXN1bHQgPSB7IHZhbHVlOiB1bmtub3duOyBsZW5ndGg6IG51bWJlciB9IHwgdW5kZWZpbmVkO1xuZXhwb3J0IHR5cGUgVGVzdEZ1bmN0aW9uID0gKFxuICBzdHJpbmc6IHN0cmluZyxcbikgPT4gVGVzdFJlc3VsdCB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IGludGVyZmFjZSBSdWxlIHtcbiAgdGVzdDogVGVzdEZ1bmN0aW9uO1xuICBmbjogQ2FsbGJhY2tGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGNsYXNzIFRva2VuaXplciB7XG4gIHJ1bGVzOiBSdWxlW107XG5cbiAgY29uc3RydWN0b3IocnVsZXM6IFJ1bGVbXSA9IFtdKSB7XG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICB9XG5cbiAgYWRkUnVsZSh0ZXN0OiBUZXN0RnVuY3Rpb24sIGZuOiBDYWxsYmFja0Z1bmN0aW9uKTogVG9rZW5pemVyIHtcbiAgICB0aGlzLnJ1bGVzLnB1c2goeyB0ZXN0LCBmbiB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRva2VuaXplKFxuICAgIHN0cmluZzogc3RyaW5nLFxuICAgIHJlY2VpdmVyID0gKHRva2VuOiBUb2tlbik6IFJlY2VpdmVyUmVzdWx0ID0+IHRva2VuLFxuICApOiBSZWNlaXZlclJlc3VsdFtdIHtcbiAgICBmdW5jdGlvbiogZ2VuZXJhdG9yKHJ1bGVzOiBSdWxlW10pOiBJdGVyYWJsZUl0ZXJhdG9yPFJlY2VpdmVyUmVzdWx0PiB7XG4gICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgZm9yIChjb25zdCBydWxlIG9mIHJ1bGVzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJ1bGUudGVzdChzdHJpbmcpO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgY29uc3QgeyB2YWx1ZSwgbGVuZ3RoIH0gPSByZXN1bHQ7XG4gICAgICAgICAgaW5kZXggKz0gbGVuZ3RoO1xuICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShsZW5ndGgpO1xuICAgICAgICAgIGNvbnN0IHRva2VuID0geyAuLi5ydWxlLmZuKHZhbHVlKSwgaW5kZXggfTtcbiAgICAgICAgICB5aWVsZCByZWNlaXZlcih0b2tlbik7XG4gICAgICAgICAgeWllbGQqIGdlbmVyYXRvcihydWxlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdG9rZW5HZW5lcmF0b3IgPSBnZW5lcmF0b3IodGhpcy5ydWxlcyk7XG5cbiAgICBjb25zdCB0b2tlbnM6IFJlY2VpdmVyUmVzdWx0W10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5HZW5lcmF0b3IpIHtcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICB9XG5cbiAgICBpZiAoc3RyaW5nLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgcGFyc2VyIGVycm9yOiBzdHJpbmcgbm90IGZ1bGx5IHBhcnNlZCEgJHtzdHJpbmcuc2xpY2UoMCwgMjUpfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0b2tlbnM7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2QkEsTUFBTSxPQUFPLFNBQVM7SUFDcEIsS0FBSztnQkFFTyxLQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUs7SUFDcEIsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFrQixFQUFFLEVBQW9CLEVBQWEsQ0FBQztRQUM1RCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQUMsSUFBSTtZQUFFLEVBQUU7UUFBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxJQUFJO0lBQ2IsQ0FBQztJQUVELFFBQVEsQ0FDTixNQUFjLEVBQ2QsUUFBUSxJQUFJLEtBQVksR0FBcUIsS0FBSztNQUNoQyxDQUFDO2tCQUNULFNBQVMsQ0FBQyxLQUFhLEVBQW9DLENBQUM7WUFDcEUsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDO1lBQ2IsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFFLENBQUM7Z0JBQ3pCLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO2dCQUMvQixFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUM7b0JBQ1gsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUUsTUFBTSxFQUFDLENBQUMsR0FBRyxNQUFNO29CQUNoQyxLQUFLLElBQUksTUFBTTtvQkFDZixNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNO29CQUM1QixLQUFLLENBQUMsS0FBSyxHQUFHLENBQUM7MkJBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLO3dCQUFHLEtBQUs7b0JBQUMsQ0FBQzswQkFDcEMsUUFBUSxDQUFDLEtBQUs7MkJBQ2IsU0FBUyxDQUFDLEtBQUs7Z0JBQ3hCLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztRQUNELEtBQUssQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLO1FBRTNDLEtBQUssQ0FBQyxNQUFNLEdBQXFCLENBQUMsQ0FBQztRQUVuQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUUsQ0FBQztZQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUs7UUFDbkIsQ0FBQztRQUVELEVBQUUsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDbEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQ1osdUNBQXVDLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUVoRSxDQUFDO1FBRUQsTUFBTSxDQUFDLE1BQU07SUFDZixDQUFDIn0=