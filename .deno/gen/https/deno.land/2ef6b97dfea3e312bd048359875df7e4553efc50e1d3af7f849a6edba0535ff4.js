export class Node {
    children = new Map();
    path = "";
    func;
    constructor(node){
        if (node) {
            Object.assign(this, node);
        }
    }
    add(path, func) {
        let n = this;
        let i = 0;
        for(; i < path.length && !isWildcard(path[i]); ++i);
        n = n.#merge(path.slice(0, i));
        let j = i;
        for(; i < path.length; ++i){
            if (isWildcard(path[i])) {
                if (j !== i) {
                    // insert static route
                    n = n.#insert(path.slice(j, i));
                    j = i;
                }
                ++i;
                for(; i < path.length && path[i] !== "/"; ++i){
                    if (isWildcard(path[i])) {
                        throw new Error(`only one wildcard per path segment is allowed, has: "${path.slice(j, i)}" in path "${path}"`);
                    }
                }
                if (path[j] === ":" && i - j === 1) {
                    throw new Error(`param must be named with a non-empty name in path "${path}"`);
                }
                // insert wildcard route
                n = n.#insert(path.slice(j, i));
                j = i;
            }
        }
        if (j === path.length) {
            n.#merge("", func);
        } else {
            n.#insert(path.slice(j), func);
        }
    }
    find(path) {
        let func;
        let params = new Map();
        const stack = [
            [
                this,
                path,
                false
            ], 
        ];
        for(let i = 0; i >= 0;){
            const [n, p, v] = stack[i];
            let np; // next path
            if (v) {
                --i;
                // assert not "*"
                if (n.path[0] === ":") {
                    params.delete(n.path.slice(1));
                }
                continue;
            } else {
                // vis = true
                stack[i][2] = true;
            }
            if (n.path[0] === "*") {
                if (n.path.length > 1) {
                    params.set(n.path.slice(1), p);
                }
                np = undefined;
            } else if (n.path[0] === ":") {
                const [_cp, _np] = splitFromFirstSlash(p);
                params.set(n.path.slice(1), _cp);
                np = _np === "" ? undefined : _np;
            } else if (n.path === p) {
                if (n.func === undefined) {
                    if (n.children.has("*")) {
                        np = "";
                    } else {
                        --i;
                        continue;
                    }
                } else {
                    np = undefined;
                }
            } else {
                const lcp = longestCommonPrefix(n.path, p);
                if (lcp !== n.path.length) {
                    --i;
                    continue;
                } else {
                    np = p.slice(lcp);
                }
            }
            if (np === undefined) {
                func = n.func;
                break;
            }
            let c = n.children.get("*");
            if (c) {
                stack[++i] = [
                    c,
                    np,
                    false
                ];
            }
            if (np === "") {
                continue;
            }
            c = n.children.get(":");
            if (c) {
                stack[++i] = [
                    c,
                    np,
                    false
                ];
            }
            c = n.children.get(np[0]);
            if (c) {
                stack[++i] = [
                    c,
                    np,
                    false
                ];
            }
        }
        return [
            func,
            params
        ];
    }
    #merge = (path, func)=>{
        let n = this;
        if (n.path === "" && n.children.size === 0) {
            n.path = path;
            n.func = func;
            return n;
        }
        if (path === "") {
            if (n.func) {
                throw new Error(`a function is already registered for path "${n.path}"`);
            }
            n.func = func;
            return n;
        }
        for(;;){
            const i = longestCommonPrefix(path, n.path);
            if (i < n.path.length) {
                const c = new Node({
                    path: n.path.slice(i),
                    children: n.children,
                    func: n.func
                });
                n.children = new Map([
                    [
                        c.path[0],
                        c
                    ]
                ]);
                n.path = path.slice(0, i);
                n.func = undefined;
            }
            if (i < path.length) {
                path = path.slice(i);
                let c = n.children.get(path[0]);
                if (c) {
                    n = c;
                    continue;
                }
                c = new Node({
                    path,
                    func
                });
                n.children.set(path[0], c);
                n = c;
            } else if (func) {
                if (n.func) {
                    throw new Error(`a function is already registered for path "${path}"`);
                }
                n.func = func;
            }
            break;
        }
        return n;
    };
    #insert = (path, func)=>{
        let n = this;
        let c = n.children.get(path[0]);
        if (c) {
            n = c.#merge(path, func);
        } else {
            c = new Node({
                path,
                func
            });
            n.children.set(path[0], c);
            n = c;
        }
        return n;
    };
}
function longestCommonPrefix(a, b) {
    let i = 0;
    let len = Math.min(a.length, b.length);
    for(; i < len && a[i] === b[i]; ++i);
    return i;
}
function splitFromFirstSlash(path) {
    let i = 0;
    for(; i < path.length && path[i] !== "/"; ++i);
    return [
        path.slice(0, i),
        path.slice(i)
    ];
}
function isWildcard(c) {
    assert(c.length === 1);
    return c === ":" || c === "*";
}
function assert(expr, msg = "") {
    if (!expr) {
        throw new AssertionError(msg);
    }
}
class AssertionError extends Error {
    constructor(message){
        super(message);
        this.name = "AssertionError";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvcm91dGVyQHYyLjAuMC9tb2QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIE5vZGUge1xuICBjaGlsZHJlbiA9IG5ldyBNYXA8c3RyaW5nLCBOb2RlPigpO1xuICBwYXRoID0gXCJcIjtcbiAgZnVuYzogRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3Iobm9kZT86IFBhcnRpYWw8Tm9kZT4pIHtcbiAgICBpZiAobm9kZSkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBub2RlKTtcbiAgICB9XG4gIH1cblxuICBhZGQocGF0aDogc3RyaW5nLCBmdW5jOiBGdW5jdGlvbik6IHZvaWQge1xuICAgIGxldCBuOiBOb2RlID0gdGhpcztcblxuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHBhdGgubGVuZ3RoICYmICFpc1dpbGRjYXJkKHBhdGhbaV0pOyArK2kpO1xuICAgIG4gPSBuLiNtZXJnZShwYXRoLnNsaWNlKDAsIGkpKTtcblxuICAgIGxldCBqID0gaTtcbiAgICBmb3IgKDsgaSA8IHBhdGgubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChpc1dpbGRjYXJkKHBhdGhbaV0pKSB7XG4gICAgICAgIGlmIChqICE9PSBpKSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IHN0YXRpYyByb3V0ZVxuICAgICAgICAgIG4gPSBuLiNpbnNlcnQocGF0aC5zbGljZShqLCBpKSk7XG4gICAgICAgICAgaiA9IGk7XG4gICAgICAgIH1cblxuICAgICAgICArK2k7XG5cbiAgICAgICAgZm9yICg7IGkgPCBwYXRoLmxlbmd0aCAmJiBwYXRoW2ldICE9PSBcIi9cIjsgKytpKSB7XG4gICAgICAgICAgaWYgKGlzV2lsZGNhcmQocGF0aFtpXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYG9ubHkgb25lIHdpbGRjYXJkIHBlciBwYXRoIHNlZ21lbnQgaXMgYWxsb3dlZCwgaGFzOiBcIiR7XG4gICAgICAgICAgICAgICAgcGF0aC5zbGljZShcbiAgICAgICAgICAgICAgICAgIGosXG4gICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVwiIGluIHBhdGggXCIke3BhdGh9XCJgLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGhbal0gPT09IFwiOlwiICYmIGkgLSBqID09PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYHBhcmFtIG11c3QgYmUgbmFtZWQgd2l0aCBhIG5vbi1lbXB0eSBuYW1lIGluIHBhdGggXCIke3BhdGh9XCJgLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW5zZXJ0IHdpbGRjYXJkIHJvdXRlXG4gICAgICAgIG4gPSBuLiNpbnNlcnQocGF0aC5zbGljZShqLCBpKSk7XG4gICAgICAgIGogPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChqID09PSBwYXRoLmxlbmd0aCkge1xuICAgICAgbi4jbWVyZ2UoXCJcIiwgZnVuYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG4uI2luc2VydChwYXRoLnNsaWNlKGopLCBmdW5jKTtcbiAgICB9XG4gIH1cblxuICBmaW5kKFxuICAgIHBhdGg6IHN0cmluZyxcbiAgKTogW2Z1bmM6IEZ1bmN0aW9uIHwgdW5kZWZpbmVkLCBwYXJhbXM6IE1hcDxzdHJpbmcsIHN0cmluZz5dIHtcbiAgICBsZXQgZnVuYzogRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG4gICAgbGV0IHBhcmFtcyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG5cbiAgICBjb25zdCBzdGFjazogW25vZGU6IE5vZGUsIHBhdGg6IHN0cmluZywgdmlzOiBib29sZWFuXVtdID0gW1xuICAgICAgW3RoaXMsIHBhdGgsIGZhbHNlXSxcbiAgICBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPj0gMDspIHtcbiAgICAgIGNvbnN0IFtuLCBwLCB2XSA9IHN0YWNrW2ldO1xuXG4gICAgICBsZXQgbnA6IHN0cmluZyB8IHVuZGVmaW5lZDsgLy8gbmV4dCBwYXRoXG5cbiAgICAgIGlmICh2KSB7XG4gICAgICAgIC0taTtcbiAgICAgICAgLy8gYXNzZXJ0IG5vdCBcIipcIlxuICAgICAgICBpZiAobi5wYXRoWzBdID09PSBcIjpcIikge1xuICAgICAgICAgIHBhcmFtcy5kZWxldGUobi5wYXRoLnNsaWNlKDEpKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHZpcyA9IHRydWVcbiAgICAgICAgc3RhY2tbaV1bMl0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobi5wYXRoWzBdID09PSBcIipcIikge1xuICAgICAgICBpZiAobi5wYXRoLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBwYXJhbXMuc2V0KG4ucGF0aC5zbGljZSgxKSwgcCk7XG4gICAgICAgIH1cbiAgICAgICAgbnAgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKG4ucGF0aFswXSA9PT0gXCI6XCIpIHtcbiAgICAgICAgY29uc3QgW19jcCwgX25wXSA9IHNwbGl0RnJvbUZpcnN0U2xhc2gocCk7XG4gICAgICAgIHBhcmFtcy5zZXQobi5wYXRoLnNsaWNlKDEpLCBfY3ApO1xuICAgICAgICBucCA9IF9ucCA9PT0gXCJcIiA/IHVuZGVmaW5lZCA6IF9ucDtcbiAgICAgIH0gZWxzZSBpZiAobi5wYXRoID09PSBwKSB7XG4gICAgICAgIGlmIChuLmZ1bmMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChuLmNoaWxkcmVuLmhhcyhcIipcIikpIHtcbiAgICAgICAgICAgIG5wID0gXCJcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLS1pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5wID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBsY3AgPSBsb25nZXN0Q29tbW9uUHJlZml4KG4ucGF0aCwgcCk7XG4gICAgICAgIGlmIChsY3AgIT09IG4ucGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAtLWk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbnAgPSBwLnNsaWNlKGxjcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZnVuYyA9IG4uZnVuYztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGxldCBjID0gbi5jaGlsZHJlbi5nZXQoXCIqXCIpO1xuICAgICAgaWYgKGMpIHtcbiAgICAgICAgc3RhY2tbKytpXSA9IFtjLCBucCwgZmFsc2VdO1xuICAgICAgfVxuXG4gICAgICBpZiAobnAgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGMgPSBuLmNoaWxkcmVuLmdldChcIjpcIik7XG4gICAgICBpZiAoYykge1xuICAgICAgICBzdGFja1srK2ldID0gW2MsIG5wLCBmYWxzZV07XG4gICAgICB9XG5cbiAgICAgIGMgPSBuLmNoaWxkcmVuLmdldChucFswXSk7XG4gICAgICBpZiAoYykge1xuICAgICAgICBzdGFja1srK2ldID0gW2MsIG5wLCBmYWxzZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFtmdW5jLCBwYXJhbXNdO1xuICB9XG5cbiAgI21lcmdlID0gKHBhdGg6IHN0cmluZywgZnVuYz86IEZ1bmN0aW9uKTogTm9kZSA9PiB7XG4gICAgbGV0IG46IE5vZGUgPSB0aGlzO1xuXG4gICAgaWYgKG4ucGF0aCA9PT0gXCJcIiAmJiBuLmNoaWxkcmVuLnNpemUgPT09IDApIHtcbiAgICAgIG4ucGF0aCA9IHBhdGg7XG4gICAgICBuLmZ1bmMgPSBmdW5jO1xuXG4gICAgICByZXR1cm4gbjtcbiAgICB9XG5cbiAgICBpZiAocGF0aCA9PT0gXCJcIikge1xuICAgICAgaWYgKG4uZnVuYykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYGEgZnVuY3Rpb24gaXMgYWxyZWFkeSByZWdpc3RlcmVkIGZvciBwYXRoIFwiJHtuLnBhdGh9XCJgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbi5mdW5jID0gZnVuYztcblxuICAgICAgcmV0dXJuIG47XG4gICAgfVxuXG4gICAgZm9yICg7Oykge1xuICAgICAgY29uc3QgaSA9IGxvbmdlc3RDb21tb25QcmVmaXgocGF0aCwgbi5wYXRoKTtcblxuICAgICAgaWYgKGkgPCBuLnBhdGgubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGMgPSBuZXcgTm9kZSh7XG4gICAgICAgICAgcGF0aDogbi5wYXRoLnNsaWNlKGkpLFxuICAgICAgICAgIGNoaWxkcmVuOiBuLmNoaWxkcmVuLFxuICAgICAgICAgIGZ1bmM6IG4uZnVuYyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbi5jaGlsZHJlbiA9IG5ldyBNYXAoW1tjLnBhdGhbMF0sIGNdXSk7XG4gICAgICAgIG4ucGF0aCA9IHBhdGguc2xpY2UoMCwgaSk7XG4gICAgICAgIG4uZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKGkgPCBwYXRoLmxlbmd0aCkge1xuICAgICAgICBwYXRoID0gcGF0aC5zbGljZShpKTtcbiAgICAgICAgbGV0IGMgPSBuLmNoaWxkcmVuLmdldChwYXRoWzBdKTtcblxuICAgICAgICBpZiAoYykge1xuICAgICAgICAgIG4gPSBjO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYyA9IG5ldyBOb2RlKHsgcGF0aCwgZnVuYyB9KTtcbiAgICAgICAgbi5jaGlsZHJlbi5zZXQocGF0aFswXSwgYyk7XG4gICAgICAgIG4gPSBjO1xuICAgICAgfSBlbHNlIGlmIChmdW5jKSB7XG4gICAgICAgIGlmIChuLmZ1bmMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgYSBmdW5jdGlvbiBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgZm9yIHBhdGggXCIke3BhdGh9XCJgLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgbi5mdW5jID0gZnVuYztcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIG47XG4gIH07XG5cbiAgI2luc2VydCA9IChwYXRoOiBzdHJpbmcsIGZ1bmM/OiBGdW5jdGlvbik6IE5vZGUgPT4ge1xuICAgIGxldCBuOiBOb2RlID0gdGhpcztcblxuICAgIGxldCBjID0gbi5jaGlsZHJlbi5nZXQocGF0aFswXSk7XG5cbiAgICBpZiAoYykge1xuICAgICAgbiA9IGMuI21lcmdlKHBhdGgsIGZ1bmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjID0gbmV3IE5vZGUoeyBwYXRoLCBmdW5jIH0pO1xuICAgICAgbi5jaGlsZHJlbi5zZXQocGF0aFswXSwgYyk7XG4gICAgICBuID0gYztcbiAgICB9XG5cbiAgICByZXR1cm4gbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbG9uZ2VzdENvbW1vblByZWZpeChhOiBzdHJpbmcsIGI6IHN0cmluZyk6IG51bWJlciB7XG4gIGxldCBpID0gMDtcbiAgbGV0IGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gIGZvciAoOyBpIDwgbGVuICYmIGFbaV0gPT09IGJbaV07ICsraSk7XG5cbiAgcmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0RnJvbUZpcnN0U2xhc2goXG4gIHBhdGg6IHN0cmluZyxcbik6IFtjcDogc3RyaW5nLCBucDogc3RyaW5nXSB7XG4gIGxldCBpID0gMDtcbiAgZm9yICg7IGkgPCBwYXRoLmxlbmd0aCAmJiBwYXRoW2ldICE9PSBcIi9cIjsgKytpKTtcbiAgcmV0dXJuIFtwYXRoLnNsaWNlKDAsIGkpLCBwYXRoLnNsaWNlKGkpXTtcbn1cblxuZnVuY3Rpb24gaXNXaWxkY2FyZChjOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgYXNzZXJ0KGMubGVuZ3RoID09PSAxKTtcblxuICByZXR1cm4gYyA9PT0gXCI6XCIgfHwgYyA9PT0gXCIqXCI7XG59XG5cbmZ1bmN0aW9uIGFzc2VydChleHByOiB1bmtub3duLCBtc2cgPSBcIlwiKTogYXNzZXJ0cyBleHByIHtcbiAgaWYgKCFleHByKSB7XG4gICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKG1zZyk7XG4gIH1cbn1cblxuY2xhc3MgQXNzZXJ0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiQXNzZXJ0aW9uRXJyb3JcIjtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxJQUFJO0lBQ2YsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHO0lBQ2xCLElBQUksR0FBRyxDQUFFO0lBQ1QsSUFBSTtnQkFFUSxJQUFvQixDQUFFLENBQUM7UUFDakMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDO1lBQ1QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSTtRQUMxQixDQUFDO0lBQ0gsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFZLEVBQUUsSUFBYyxFQUFRLENBQUM7UUFDdkMsR0FBRyxDQUFDLENBQUMsR0FBUyxJQUFJO1FBRWxCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNULEdBQUcsR0FBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ25ELENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUU1QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDVCxHQUFHLEdBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFFLENBQUM7WUFDNUIsRUFBRSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3hCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7b0JBQ1osRUFBc0IsQUFBdEIsb0JBQXNCO29CQUN0QixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7b0JBQzdCLENBQUMsR0FBRyxDQUFDO2dCQUNQLENBQUM7a0JBRUMsQ0FBQztnQkFFSCxHQUFHLEdBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFHLE1BQUksQ0FBQyxDQUFFLENBQUM7b0JBQy9DLEVBQUUsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO3dCQUN4QixLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFDWixxREFBcUQsRUFDcEQsSUFBSSxDQUFDLEtBQUssQ0FDUixDQUFDLEVBQ0QsQ0FBQyxFQUVKLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFFeEIsQ0FBQztnQkFDSCxDQUFDO2dCQUNELEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUcsTUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO29CQUNuQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFDWixtREFBbUQsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFFaEUsQ0FBQztnQkFDRCxFQUF3QixBQUF4QixzQkFBd0I7Z0JBQ3hCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDN0IsQ0FBQyxHQUFHLENBQUM7WUFDUCxDQUFDO1FBQ0gsQ0FBQztRQUVELEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFFLEdBQUUsSUFBSTtRQUNuQixDQUFDLE1BQU0sQ0FBQztZQUNOLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJO1FBQy9CLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxDQUNGLElBQVksRUFDK0MsQ0FBQztRQUM1RCxHQUFHLENBQUMsSUFBSTtRQUNSLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUc7UUFFcEIsS0FBSyxDQUFDLEtBQUssR0FBK0MsQ0FBQztZQUN6RCxDQUFDO2dCQUFBLElBQUk7Z0JBQUUsSUFBSTtnQkFBRSxLQUFLO1lBQUEsQ0FBQztRQUNyQixDQUFDO1FBRUQsR0FBRyxDQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUcsQ0FBQztZQUN4QixLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7WUFFekIsR0FBRyxDQUFDLEVBQUUsQ0FBc0IsQ0FBWSxBQUFaLEVBQVksQUFBWixVQUFZO1lBRXhDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztrQkFDSixDQUFDO2dCQUNILEVBQWlCLEFBQWpCLGVBQWlCO2dCQUNqQixFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBRyxJQUFFLENBQUM7b0JBQ3RCLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDOUIsQ0FBQztnQkFDRCxRQUFRO1lBQ1YsQ0FBQyxNQUFNLENBQUM7Z0JBQ04sRUFBYSxBQUFiLFdBQWE7Z0JBQ2IsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSTtZQUNwQixDQUFDO1lBRUQsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUcsSUFBRSxDQUFDO2dCQUN0QixFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7b0JBQ3RCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBQy9CLENBQUM7Z0JBQ0QsRUFBRSxHQUFHLFNBQVM7WUFDaEIsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFHLElBQUUsQ0FBQztnQkFDN0IsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksbUJBQW1CLENBQUMsQ0FBQztnQkFDeEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRztnQkFDL0IsRUFBRSxHQUFHLEdBQUcsS0FBSyxDQUFFLElBQUcsU0FBUyxHQUFHLEdBQUc7WUFDbkMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUN4QixFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUUsQ0FBQztvQkFDekIsRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUcsS0FBRyxDQUFDO3dCQUN4QixFQUFFLEdBQUcsQ0FBRTtvQkFDVCxDQUFDLE1BQU0sQ0FBQzswQkFDSixDQUFDO3dCQUNILFFBQVE7b0JBQ1YsQ0FBQztnQkFDSCxDQUFDLE1BQU0sQ0FBQztvQkFDTixFQUFFLEdBQUcsU0FBUztnQkFDaEIsQ0FBQztZQUNILENBQUMsTUFBTSxDQUFDO2dCQUNOLEtBQUssQ0FBQyxHQUFHLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN6QyxFQUFFLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7c0JBQ3hCLENBQUM7b0JBQ0gsUUFBUTtnQkFDVixDQUFDLE1BQU0sQ0FBQztvQkFDTixFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHO2dCQUNsQixDQUFDO1lBQ0gsQ0FBQztZQUVELEVBQUUsRUFBRSxFQUFFLEtBQUssU0FBUyxFQUFFLENBQUM7Z0JBQ3JCLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSTtnQkFDYixLQUFLO1lBQ1AsQ0FBQztZQUVELEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBRztZQUMxQixFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ04sS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDO29CQUFBLENBQUM7b0JBQUUsRUFBRTtvQkFBRSxLQUFLO2dCQUFBLENBQUM7WUFDN0IsQ0FBQztZQUVELEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBRSxHQUFFLENBQUM7Z0JBQ2QsUUFBUTtZQUNWLENBQUM7WUFFRCxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBRztZQUN0QixFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ04sS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDO29CQUFBLENBQUM7b0JBQUUsRUFBRTtvQkFBRSxLQUFLO2dCQUFBLENBQUM7WUFDN0IsQ0FBQztZQUVELENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2QixFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ04sS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDO29CQUFBLENBQUM7b0JBQUUsRUFBRTtvQkFBRSxLQUFLO2dCQUFBLENBQUM7WUFDN0IsQ0FBQztRQUNILENBQUM7UUFFRCxNQUFNLENBQUMsQ0FBQztZQUFBLElBQUk7WUFBRSxNQUFNO1FBQUEsQ0FBQztJQUN2QixDQUFDO0lBRUQsQ0FBQyxLQUFLLElBQUksSUFBWSxFQUFFLElBQWUsR0FBVyxDQUFDO1FBQ2pELEdBQUcsQ0FBQyxDQUFDLEdBQVMsSUFBSTtRQUVsQixFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFFLEtBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDM0MsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJO1lBQ2IsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJO1lBRWIsTUFBTSxDQUFDLENBQUM7UUFDVixDQUFDO1FBRUQsRUFBRSxFQUFFLElBQUksS0FBSyxDQUFFLEdBQUUsQ0FBQztZQUNoQixFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNYLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUNaLDJDQUEyQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUUxRCxDQUFDO1lBQ0QsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJO1lBRWIsTUFBTSxDQUFDLENBQUM7UUFDVixDQUFDO1FBRUQsR0FBRyxJQUFNLENBQUM7WUFDUixLQUFLLENBQUMsQ0FBQyxHQUFHLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSTtZQUUxQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ3RCLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNsQixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDcEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRO29CQUNwQixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUk7Z0JBQ2QsQ0FBQztnQkFFRCxDQUFDLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFBQSxDQUFDO3dCQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFBRyxDQUFDO29CQUFBLENBQUM7Z0JBQUEsQ0FBQztnQkFDckMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN4QixDQUFDLENBQUMsSUFBSSxHQUFHLFNBQVM7WUFDcEIsQ0FBQztZQUVELEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNwQixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNuQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUU3QixFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7b0JBQ04sQ0FBQyxHQUFHLENBQUM7b0JBQ0wsUUFBUTtnQkFDVixDQUFDO2dCQUVELENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQUMsSUFBSTtvQkFBRSxJQUFJO2dCQUFDLENBQUM7Z0JBQzNCLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztnQkFDekIsQ0FBQyxHQUFHLENBQUM7WUFDUCxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDO2dCQUNoQixFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNYLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUNaLDJDQUEyQyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUV4RCxDQUFDO2dCQUNELENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSTtZQUNmLENBQUM7WUFFRCxLQUFLO1FBQ1AsQ0FBQztRQUVELE1BQU0sQ0FBQyxDQUFDO0lBQ1YsQ0FBQztJQUVELENBQUMsTUFBTSxJQUFJLElBQVksRUFBRSxJQUFlLEdBQVcsQ0FBQztRQUNsRCxHQUFHLENBQUMsQ0FBQyxHQUFTLElBQUk7UUFFbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU3QixFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDTixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJO1FBQ3pCLENBQUMsTUFBTSxDQUFDO1lBQ04sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFBQyxJQUFJO2dCQUFFLElBQUk7WUFBQyxDQUFDO1lBQzNCLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUN6QixDQUFDLEdBQUcsQ0FBQztRQUNQLENBQUM7UUFFRCxNQUFNLENBQUMsQ0FBQztJQUNWLENBQUM7O1NBR00sbUJBQW1CLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBVSxDQUFDO0lBQzFELEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNULEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNO0lBQ3JDLEdBQUcsR0FBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBRXBDLE1BQU0sQ0FBQyxDQUFDO0FBQ1YsQ0FBQztTQUVRLG1CQUFtQixDQUMxQixJQUFZLEVBQ2MsQ0FBQztJQUMzQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDVCxHQUFHLEdBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFHLE1BQUksQ0FBQztJQUM5QyxNQUFNLENBQUMsQ0FBQztRQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFBQyxDQUFDO0FBQzFDLENBQUM7U0FFUSxVQUFVLENBQUMsQ0FBUyxFQUFXLENBQUM7SUFDdkMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztJQUVyQixNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUcsTUFBSSxDQUFDLEtBQUssQ0FBRztBQUMvQixDQUFDO1NBRVEsTUFBTSxDQUFDLElBQWEsRUFBRSxHQUFHLEdBQUcsQ0FBRSxHQUFnQixDQUFDO0lBQ3RELEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUNWLEtBQUssQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUc7SUFDOUIsQ0FBQztBQUNILENBQUM7TUFFSyxjQUFjLFNBQVMsS0FBSztnQkFDcEIsT0FBZSxDQUFFLENBQUM7UUFDNUIsS0FBSyxDQUFDLE9BQU87UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLENBQWdCO0lBQzlCLENBQUMifQ==