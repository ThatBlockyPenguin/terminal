import { Status } from "./vendor/https/deno.land/std/http/http_status.ts";
import { join } from "./vendor/https/deno.land/std/path/mod.ts";
import { getCookies, setCookie } from "./vendor/https/deno.land/std/http/cookie.ts";
import { MultipartReader } from "./vendor/https/deno.land/std/mime/multipart.ts";
import { Header, MIME } from "./constants.ts";
import { contentType, NotFoundHandler } from "./util.ts";
const { cwd , readFile , readAll  } = Deno;
const encoder = new TextEncoder();
const decoder = new TextDecoder();
export class Context {
    app;
    request;
    url;
    response = {
        headers: new Headers()
    };
    params = {
    };
    customContext;
    #store;
    #body;
    get cookies() {
        return getCookies(this.request);
    }
    get path() {
        return this.url.pathname;
    }
    get method() {
        return this.request.method;
    }
    get queryParams() {
        const params = {
        };
        for (const [k, v] of this.url.searchParams){
            params[k] = v;
        }
        return params;
    }
    get body() {
        return this.#body ?? (this.#body = this.#readBody());
    }
    get(key) {
        return this.#store?.get(key);
    }
    set(key, val) {
        if (this.#store === undefined) {
            this.#store = new Map();
        }
        this.#store.set(key, val);
    }
    constructor(optionsOrContext){
        if (optionsOrContext instanceof Context) {
            Object.assign(this, optionsOrContext);
            this.customContext = this;
            return;
        }
        const opts = optionsOrContext;
        this.app = opts.app;
        this.request = opts.r;
        this.url = new URL(this.request.url, `http://0.0.0.0`);
    }
    #writeContentType = (v)=>{
        if (!this.response.headers.has(Header.ContentType)) {
            this.response.headers.set(Header.ContentType, v);
        }
    };
    #readBody = async ()=>{
        const contentType = this.request.headers.get(Header.ContentType);
        walk: {
            let data = {
            };
            if (contentType) {
                if (contentType.includes(MIME.ApplicationJSON)) {
                    data = JSON.parse(decoder.decode(await readAll(this.request.body)));
                } else if (contentType.includes(MIME.ApplicationForm)) {
                    for (const [k, v] of new URLSearchParams(decoder.decode(await readAll(this.request.body)))){
                        data[k] = v;
                    }
                } else if (contentType.includes(MIME.MultipartForm)) {
                    const match = contentType.match(/boundary=([^\s]+)/);
                    const boundary = match ? match[1] : undefined;
                    if (boundary) {
                        const mr = new MultipartReader(this.request.body, boundary);
                        const form = await mr.readForm();
                        for (const [k, v] of form.entries()){
                            data[k] = v;
                        }
                    }
                } else {
                    break walk;
                }
            } else {
                break walk;
            }
            return data;
        }
        return decoder.decode(await readAll(this.request.body));
    };
    string(v, code = Status.OK) {
        this.#writeContentType(MIME.TextPlainCharsetUTF8);
        this.response.status = code;
        this.response.body = encoder.encode(v);
    }
    json(v, code = Status.OK) {
        this.#writeContentType(MIME.ApplicationJSONCharsetUTF8);
        this.response.status = code;
        this.response.body = encoder.encode(typeof v === "object" ? JSON.stringify(v) : v);
    }
    /** Sends an HTTP response with status code. */ html(v, code = Status.OK) {
        this.#writeContentType(MIME.TextHTMLCharsetUTF8);
        this.response.status = code;
        this.response.body = encoder.encode(v);
    }
    /** Sends an HTTP blob response with status code. */ htmlBlob(b, code = Status.OK) {
        this.blob(b, MIME.TextHTMLCharsetUTF8, code);
    }
    /**
   * Renders a template with data and sends a text/html response with status code.
   * renderer must be registered first.
   */ async render(name, data = {
    }, code = Status.OK) {
        if (!this.app.renderer) {
            throw new Error();
        }
        const r = await this.app.renderer.render(name, data);
        this.htmlBlob(r, code);
    }
    /** Sends a blob response with content type and status code. */ blob(b, contentType, code = Status.OK) {
        if (contentType) {
            this.#writeContentType(contentType);
        }
        this.response.status = code;
        this.response.body = b;
    }
    async file(filepath) {
        filepath = join(cwd(), filepath);
        try {
            this.blob(await readFile(filepath), contentType(filepath));
        } catch  {
            NotFoundHandler();
        }
    }
    /** append a `Set-Cookie` header to the response */ setCookie(c) {
        setCookie(this.response, c);
    }
    /** Redirects a response to a specific URL. the `code` defaults to `302` if omitted */ redirect(url, code = Status.Found) {
        this.response.headers.set(Header.Location, url);
        this.response.status = code;
    }
}
//# sourceMappingURL=data:application/json;base64,