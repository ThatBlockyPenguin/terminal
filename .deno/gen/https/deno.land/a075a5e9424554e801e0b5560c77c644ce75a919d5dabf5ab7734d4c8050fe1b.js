const { open  } = Deno;
import { BufReader } from "./vendor/https/deno.land/std/io/bufio.ts";
import { Buffer } from "./vendor/https/deno.land/std/io/buffer.ts";
import { readAll } from "./vendor/https/deno.land/std/io/util.ts";
import escape from "./vendor/https/deno.land/x/lodash/escape.js";
var ReadMode;
(function(ReadMode) {
    ReadMode[ReadMode["Normal"] = 0] = "Normal";
    ReadMode[ReadMode["Escaped"] = 1] = "Escaped";
    ReadMode[ReadMode["Raw"] = 2] = "Raw";
    ReadMode[ReadMode["Comment"] = 3] = "Comment";
    ReadMode[ReadMode["Evaluate"] = 4] = "Evaluate";
})(ReadMode || (ReadMode = {
}));
var Codes;
(function(Codes) {
    Codes[Codes["Begin"] = 60] = "Begin";
    Codes[Codes["End"] = 62] = "End";
    Codes[Codes["Percent"] = 37] = "Percent";
    Codes[Codes["Escaped"] = 61] = "Escaped";
    Codes[Codes["Raw"] = 45] = "Raw";
    Codes[Codes["Comment"] = 35] = "Comment";
})(Codes || (Codes = {
}));
const encoder = new TextEncoder();
const decoder = new TextDecoder("utf-8");
class StringReader extends Buffer {
    constructor(s){
        super(encoder.encode(s).buffer);
    }
}
async function include(path, params) {
    const result = await renderFile(path, params);
    const buf = new Buffer();
    await buf.readFrom(result);
    return await bufToStr(buf);
}
function sanitize(str) {
    return str.replace(/\`/g, "\\`").replace(/\$/g, "\\$").replace(/\\+$/, ""); // Trim backslashes at line end. TODO: Fix this to render backslashes.
}
async function bufToStr(buf) {
    return decoder.decode(await readAll(buf));
}
function removeLastSemi(s) {
    return s.trimRight().replace(/;$/, "");
}
async function bufToStrWithSanitize(buf) {
    return sanitize(await bufToStr(buf));
}
function NewTemplate(script) {
    return async (params)=>{
        const output = [];
        await new Promise((resolve, reject)=>{
            const args = {
                include,
                ...params,
                $$OUTPUT: output,
                $$FINISHED: resolve,
                $$ERROR: reject,
                $$ESCAPE: escape
            };
            const src = `(async() => {
        try { ${script} } catch (error) { $$ERROR(error) }
        $$FINISHED();
      })();`;
            const f = new Function(...Object.keys(args), src);
            f(...Object.values(args));
        });
        return output.join("");
    };
}
export async function compile(reader) {
    const src = new BufReader(reader);
    const buf = [];
    const statements = [];
    const statementBuf = new Buffer();
    let readMode = ReadMode.Normal;
    const statementBufWrite = async (byte)=>await statementBuf.write(new Uint8Array([
            byte
        ]))
    ;
    while(true){
        const byte = await src.readByte();
        if (byte === null) {
            break;
        }
        buf.push(byte);
        if (buf.length < 3) {
            continue;
        }
        if (readMode === ReadMode.Normal) {
            // Detect ReadMode
            if (buf[0] === Codes.Begin && buf[1] === Codes.Percent) {
                switch(buf[2]){
                    case Codes.Escaped:
                        readMode = ReadMode.Escaped;
                        break;
                    case Codes.Raw:
                        readMode = ReadMode.Raw;
                        break;
                    case Codes.Comment:
                        readMode = ReadMode.Comment;
                        break;
                    default:
                        readMode = ReadMode.Evaluate;
                        break;
                }
                statements.push(`;$$OUTPUT.push(\`${await bufToStrWithSanitize(statementBuf)}\`);`);
                statementBuf.reset();
                buf.splice(0);
                continue;
            }
            if (buf.length > 2) {
                await statementBufWrite(buf.shift());
            }
            continue;
        }
        // Finish current ReadMode
        if (buf[1] === Codes.Percent && buf[2] === Codes.End) {
            statementBufWrite(buf.shift());
            buf.splice(0);
            // Don't execute if ReadMode is Comment.
            if (readMode !== ReadMode.Comment) {
                switch(readMode){
                    case ReadMode.Raw:
                        statements.push(`;$$OUTPUT.push(${removeLastSemi(await bufToStr(statementBuf))});`);
                        break;
                    case ReadMode.Escaped:
                        statements.push(`;$$OUTPUT.push($$ESCAPE(${removeLastSemi(await bufToStr(statementBuf))}));`);
                        break;
                    case ReadMode.Evaluate:
                        statements.push(await bufToStr(statementBuf));
                        break;
                }
            }
            statementBuf.reset();
            readMode = ReadMode.Normal;
            continue;
        }
        await statementBufWrite(buf.shift());
    }
    // Flush buffer
    while(buf.length > 0){
        await statementBufWrite(buf.shift());
    }
    statements.push(`$$OUTPUT.push(\`${await bufToStrWithSanitize(statementBuf)}\`);`);
    statementBuf.reset();
    return await NewTemplate(statements.join(""));
}
export async function renderToString(body, params) {
    const reader = new StringReader(body);
    const template = await compile(reader);
    return template(params);
}
export async function renderFileToString(path, params) {
    const file = await open(path);
    const template = await compile(file);
    file.close();
    return template(params);
}
export async function render(body, params) {
    const result = await renderToString(body, params);
    return new StringReader(result);
}
export async function renderFile(path, params) {
    const result = await renderFileToString(path, params);
    return new StringReader(result);
}
//# sourceMappingURL=data:application/json;base64,